name: END TO END DEVOPS

on:
  push:
    branches: [deployment]


jobs:
  build-and-deploy-frontend:
    if: startsWith(github.event.head_commit.message, 'apply')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 

      - name: Build frontend
        working-directory: herafy-client
        run: docker build -f Dockerfile1 -t mariomafdy/frontend:latest .

      - name: Push the frontend Image
        run: docker push mariomafdy/frontend:latest
        
      - name: Test frontend Docker cache
        uses: docker/build-push-action@v5
        with:
          context: ./herafy-client
          file: ./herafy-client/Dockerfile1
          push: false
          tags: mariomafdy/frontend:test
          cache-from: type=registry,ref=mariomafdy/frontend:cache
          cache-to: type=registry,ref=mariomafdy/frontend:cache,mode=max


  

  build-and-deploy-backend:
    if: startsWith(github.event.head_commit.message, 'apply')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to Docker Registry
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 
      
      - name: Build backend
        working-directory: herafy-back-end
        run: docker build -f Dockerfile -t mariomafdy/backend:latest .

      - name: Push the backend Image
        run: docker push mariomafdy/backend:latest

      - name: Test Backend Docker cache
        uses: docker/build-push-action@v5
        with:
          context: ./herafy-back-end
          file: ./herafy-back-end/Dockerfile
          push: false
          tags: mariomafdy/backend:test
          cache-from: type=registry,ref=mariomafdy/backend:cache
          cache-to: type=registry,ref=mariomafdy/backend:cache,mode=max

  test-frontend:
    runs-on: ubuntu-latest
    needs: 
      - build-and-deploy-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            herafy-client/node_modules
          key: frontend-build-${{ hashFiles('herafy-client/package-lock.json') }}
          restore-keys: |
            frontend-build-

      - name: Install dependencies
        working-directory: herafy-client
        run: npm install

      - name: Run frontend tests
        working-directory: herafy-client
        run: |
          if npm run | grep -q "test"; then
            npm run test
          else
            echo "No test script defined in package.json. Skipping tests."
          fi

  test-backend:
    runs-on: ubuntu-latest
    needs: 
      - build-and-deploy-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            herafy-back-end/node_modules
          key: backend-build-${{ hashFiles('herafy-back-end/package-lock.json') }}
          restore-keys: |
            backend-build-

      - name: Install dependencies
        working-directory: herafy-back-end
        run: npm install

      - name: Run backend tests
        working-directory: herafy-back-end
        run: |
          if npm run | grep -q "test"; then
            npm run test
          else
            echo "No test script defined in package.json. Skipping tests."
          fi

  initializing-infra:
    if: startsWith(github.event.head_commit.message, 'apply')
    runs-on: ubuntu-latest
    needs: 
      - test-frontend
      - test-backend
    defaults:
      run:
        working-directory: terra_back

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.6

    - name: Terraform Init & Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        terraform init
        terraform apply --auto-approve

  terraform:
    # if: startsWith(github.event.head_commit.message, 'terraform apply')
    runs-on: ubuntu-latest
    needs: 
      - initializing-infra
    defaults:
      run:
        working-directory: Terraform

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.6

    - name: Terraform Init & Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        terraform init
        terraform apply --auto-approve
  
  monitor:
    # if: github.event.head_commit.message == 'k8s deploy'
    runs-on: ubuntu-latest
    needs: 
      - terraform
    # defaults:
    #   run:
    #     working-directory: k8s

    
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: "v1.33.0"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name Mario-eks-cluster --region ${{ secrets.AWS_DEFAULT_REGION }}


    - name: Deploy to Kubernetes
      run: |
        helm repo add stable https://charts.helm.sh/stable

        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

        kubectl create namespace prometheus

        helm install stable prometheus-community/kube-prometheus-stack -n prometheus

        kubectl patch svc stable-kube-prometheus-sta-prometheus -n prometheus -p '{"spec": {"type": "LoadBalancer"}}' && \
        kubectl patch svc stable-grafana -n prometheus -p '{"spec": {"type": "LoadBalancer"}}'

  # run-docker-compose:
  #   runs-on: self-hosted
  #   needs: 
  #     - build-and-deploy-frontend
  #     - build-and-deploy-backend

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Docker Compose
  #       run: |
  #         sudo apt update
  #         sudo apt install -y docker-compose

  #     - name: Build the docker-compose stack
  #       run: docker-compose -f docker-compose.yml up -d
  #     - name: Check running containers
  #       run: docker ps -a
      